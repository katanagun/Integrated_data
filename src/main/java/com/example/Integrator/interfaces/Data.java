package com.example.Integrator.interfaces;


import com.example.Integrator.IntegratorException;

/**
 * Интерфейс наследуется классами, представляющими наборы данных.
 *
 * @param <T> определяет тип данных, которые содержатся в данном наборе.
 * @author Ю.Д.Заковряшин, 2025
 */
public interface Data<T> {
    /**
     * Метод возвращает набор данных в исходном формате.
     *
     * @return набор данных.
     * @throws IntegratorException выбрасывается в случае невозможности получения набора данных.
     */
    T getContent() throws IntegratorException;

    /**
     * Метод возвращает часть часть набора данных.
     *
     * @param limit ограничительный параметр, который может интерпретироваться по разному в зависимости от
     *              реализации метода. Например, этот параметр может означать, что метод должен вернуть
     *              только первые limit элементов набора данных.
     * @return часть набора данных, определённую параметром limit.
     * @throws IntegratorException выбрасывается в случае невозможности получения набора данных.
     */
    T getContent(int limit) throws IntegratorException;

    /**
     * Метод возвращает набор данных, преобразованных с помощью объекта типа Converter в формат U.
     *
     * @param converter объект, выполняющий преобразование данных из исходного формата данных T в формат U.
     * @return преобразованные данные в формате U.
     * @throws IntegratorException выбрасывается в случае невозможности получения преобразованного набора данных.
     */
    <U> U getContent(Converter<T, U> converter) throws IntegratorException;

    /**
     * Метод возвращает часть набора данных, преобразованных с помощью объекта типа Converter в формат U.
     *
     * @param converter объект, выполняющий преобразование данных из исходного формата данных T в формат U.
     * @param limit     ограничительный параметр, который может интерпретироваться по разному в зависимости от
     *                  реализации метода. Например, этот параметр может означать, что метод должен преобразовать
     *                  и вернуть только элемент набора данных с индексом limit.
     * @return часть преобразованных данных в формате U.
     * @throws IntegratorException выбрасывается в случае невозможности получения преобразованного набора данных.
     */
    <U> U getContent(Converter<T, U> converter, int limit) throws IntegratorException;
}

